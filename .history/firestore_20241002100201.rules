rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if all required fields are present
    function hasRequiredFields(data) {
      return data.keys().hasAll([
        'userTypes', 'location', 'sports', 'competitionLevels', 'interestedFeatures',
        'signupMethod', 'signUpData', 'email', 'phoneNumber', 'facebookId',
        'authProvider', 'timestamp'
      ]);
    }

    // Helper function to validate data types
    function hasValidDataTypes(data) {
      return data.userTypes is list
        && data.location is map
        && data.location.keys().hasAll(['country', 'state'])
        && data.sports is list
        && data.competitionLevels is list
        && data.interestedFeatures is list
        && data.signupMethod in ['google', 'facebook', 'phone']
        && data.signUpData is string
        && (data.email == null || data.email is string)
        && (data.phoneNumber == null || data.phoneNumber is string)
        && (data.facebookId == null || data.facebookId is string)
        && data.authProvider is string
        && data.timestamp is timestamp;
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null
                    && request.auth.uid == userId
                    && hasRequiredFields(request.resource.data)
                    && hasValidDataTypes(request.resource.data);
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && hasRequiredFields(request.resource.data)
                    && hasValidDataTypes(request.resource.data);
      allow delete: if false; // Prevent deletion of user data
    }
  }
}